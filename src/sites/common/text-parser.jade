-
	function escapeHtml(text) {
		return text.replace(/>/g,'&gt;').replace(/</g,'&lt;');
	}
	
	function parse(text) {
		'use strict';
		if (text === null) {
			return null;
		}
		text = analyzeHashtags(analyzeMentions(analyzeUrl(analyzeStrike(analyzeBold(escapeHtml(text)))))).replace(/(\r\n|\r|\n)/g, '<br>');
		return text;
	}

	function analyzeUrl(text) {
		'use strict';
		return text.replace(/https?:\/\/[0-9a-z\.\-~%!$&'()*+,;=@:]+(\/[0-9a-z\.\-~%!$&'()*+,;=@:]*)*(\?[0-9a-z\.\-~%!$&'()*+,;=@:\/\?]*)?(#[0-9a-z\.\-~%!$&'()*+,;=@:\/\?]*)?/gi, function(url) {
			return '<a href="' + url + '" title="' + url + '" target="_blank" class="url" rel="nofollow">' + url + '</a>';
		});
	}

	function analyzeMentions(text) {
		'use strict';
		return text.replace(/@([a-zA-Z0-9\-]+)/g, function(arg, screenName) {
			return '<a href="' + config.url + '/' + screenName + '" class="mention" data-user-card="' + screenName + '">@' + screenName + '</a>';
		});
	}
	
	function analyzeBold(text) {
		'use strict';
		return text.replace(/\*\*(.+?)\*\*/g, function(arg, boldee) {
			return '<strong>' + boldee + '</strong>';
		});
	}
	
	function analyzeStrike(text) {
		'use strict';
		return text.replace(/~~(.+?)~~/g, function(arg, strikeee){
			return '<del>' + strikeee + '</del>';
		});
	}

	function analyzeHashtags(text) {
		'use strict';
		return text.replace(/(^|\s)#(\S+)/g, function(arg, _, tag) {
			return _ + '<a href="' + config.searchUrl + '?q=' + encodeURIComponent("#"+tag) + '" class="hashtag">#' + tag + '</a>';
		});
	}
